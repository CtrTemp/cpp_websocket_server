// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace hello {
class test_pack;
struct test_packDefaultTypeInternal;
extern test_packDefaultTypeInternal _test_pack_default_instance_;
}  // namespace hello
PROTOBUF_NAMESPACE_OPEN
template<> ::hello::test_pack* Arena::CreateMaybeMessage<::hello::test_pack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hello {

// ===================================================================

class test_pack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hello.test_pack) */ {
 public:
  inline test_pack() : test_pack(nullptr) {}
  ~test_pack() override;
  explicit constexpr test_pack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  test_pack(const test_pack& from);
  test_pack(test_pack&& from) noexcept
    : test_pack() {
    *this = ::std::move(from);
  }

  inline test_pack& operator=(const test_pack& from) {
    CopyFrom(from);
    return *this;
  }
  inline test_pack& operator=(test_pack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const test_pack& default_instance() {
    return *internal_default_instance();
  }
  static inline const test_pack* internal_default_instance() {
    return reinterpret_cast<const test_pack*>(
               &_test_pack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(test_pack& a, test_pack& b) {
    a.Swap(&b);
  }
  inline void Swap(test_pack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(test_pack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline test_pack* New() const final {
    return new test_pack();
  }

  test_pack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<test_pack>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const test_pack& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const test_pack& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(test_pack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hello.test_pack";
  }
  protected:
  explicit test_pack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 4,
    kCmdFieldNumber = 1,
    kImgUrlFieldNumber = 5,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // repeated int32 buffer = 4;
  int buffer_size() const;
  private:
  int _internal_buffer_size() const;
  public:
  void clear_buffer();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buffer(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_buffer() const;
  void _internal_add_buffer(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_buffer();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 buffer(int index) const;
  void set_buffer(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buffer(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buffer() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buffer();

  // string cmd = 1;
  void clear_cmd();
  const std::string& cmd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd();
  PROTOBUF_MUST_USE_RESULT std::string* release_cmd();
  void set_allocated_cmd(std::string* cmd);
  private:
  const std::string& _internal_cmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd(const std::string& value);
  std::string* _internal_mutable_cmd();
  public:

  // string img_url = 5;
  void clear_img_url();
  const std::string& img_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_img_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_img_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_img_url();
  void set_allocated_img_url(std::string* img_url);
  private:
  const std::string& _internal_img_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_img_url(const std::string& value);
  std::string* _internal_mutable_img_url();
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:hello.test_pack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buffer_;
  mutable std::atomic<int> _buffer_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr img_url_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// test_pack

// string cmd = 1;
inline void test_pack::clear_cmd() {
  cmd_.ClearToEmpty();
}
inline const std::string& test_pack::cmd() const {
  // @@protoc_insertion_point(field_get:hello.test_pack.cmd)
  return _internal_cmd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void test_pack::set_cmd(ArgT0&& arg0, ArgT... args) {
 
 cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hello.test_pack.cmd)
}
inline std::string* test_pack::mutable_cmd() {
  std::string* _s = _internal_mutable_cmd();
  // @@protoc_insertion_point(field_mutable:hello.test_pack.cmd)
  return _s;
}
inline const std::string& test_pack::_internal_cmd() const {
  return cmd_.Get();
}
inline void test_pack::_internal_set_cmd(const std::string& value) {
  
  cmd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* test_pack::_internal_mutable_cmd() {
  
  return cmd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* test_pack::release_cmd() {
  // @@protoc_insertion_point(field_release:hello.test_pack.cmd)
  return cmd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void test_pack::set_allocated_cmd(std::string* cmd) {
  if (cmd != nullptr) {
    
  } else {
    
  }
  cmd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:hello.test_pack.cmd)
}

// int32 width = 2;
inline void test_pack::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_pack::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_pack::width() const {
  // @@protoc_insertion_point(field_get:hello.test_pack.width)
  return _internal_width();
}
inline void test_pack::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void test_pack::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:hello.test_pack.width)
}

// int32 height = 3;
inline void test_pack::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_pack::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_pack::height() const {
  // @@protoc_insertion_point(field_get:hello.test_pack.height)
  return _internal_height();
}
inline void test_pack::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void test_pack::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:hello.test_pack.height)
}

// repeated int32 buffer = 4;
inline int test_pack::_internal_buffer_size() const {
  return buffer_.size();
}
inline int test_pack::buffer_size() const {
  return _internal_buffer_size();
}
inline void test_pack::clear_buffer() {
  buffer_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_pack::_internal_buffer(int index) const {
  return buffer_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 test_pack::buffer(int index) const {
  // @@protoc_insertion_point(field_get:hello.test_pack.buffer)
  return _internal_buffer(index);
}
inline void test_pack::set_buffer(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buffer_.Set(index, value);
  // @@protoc_insertion_point(field_set:hello.test_pack.buffer)
}
inline void test_pack::_internal_add_buffer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buffer_.Add(value);
}
inline void test_pack::add_buffer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_buffer(value);
  // @@protoc_insertion_point(field_add:hello.test_pack.buffer)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
test_pack::_internal_buffer() const {
  return buffer_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
test_pack::buffer() const {
  // @@protoc_insertion_point(field_list:hello.test_pack.buffer)
  return _internal_buffer();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
test_pack::_internal_mutable_buffer() {
  return &buffer_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
test_pack::mutable_buffer() {
  // @@protoc_insertion_point(field_mutable_list:hello.test_pack.buffer)
  return _internal_mutable_buffer();
}

// string img_url = 5;
inline void test_pack::clear_img_url() {
  img_url_.ClearToEmpty();
}
inline const std::string& test_pack::img_url() const {
  // @@protoc_insertion_point(field_get:hello.test_pack.img_url)
  return _internal_img_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void test_pack::set_img_url(ArgT0&& arg0, ArgT... args) {
 
 img_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hello.test_pack.img_url)
}
inline std::string* test_pack::mutable_img_url() {
  std::string* _s = _internal_mutable_img_url();
  // @@protoc_insertion_point(field_mutable:hello.test_pack.img_url)
  return _s;
}
inline const std::string& test_pack::_internal_img_url() const {
  return img_url_.Get();
}
inline void test_pack::_internal_set_img_url(const std::string& value) {
  
  img_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* test_pack::_internal_mutable_img_url() {
  
  return img_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* test_pack::release_img_url() {
  // @@protoc_insertion_point(field_release:hello.test_pack.img_url)
  return img_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void test_pack::set_allocated_img_url(std::string* img_url) {
  if (img_url != nullptr) {
    
  } else {
    
  }
  img_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), img_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:hello.test_pack.img_url)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hello

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
